/**
 * Flowtype definitions for data
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.21.0
 * @flow
 */
export type MetadataPrimitive = string | number | boolean | null | void;
export type MetadataArray<T> = Array<T | MetadataArray<T>>;
/**
 * A collection of data.
 */
export type Metadata = {
  [name: string]:
    | Metadata
    | MetadataPrimitive
    | MetadataArray<MetadataPrimitive | Metadata>,
};
/**
 * A secret that is a string.
 *
 * This opaque type makes it clearer when secrets are being used and enforces
 * the need for explicit casting if they must be used as a string.
 */
export opaque type SecretString = string;
/**
 * A collection of secrets keyed by their names.
 */
export type Secrets = {
  +[key: string]: SecretString,
};
/**
 * Make a read-only type mutable.
 */
export type Mutable<T> = $ObjMapi<T, <P>(P) => $ElementType<T, P>>;
