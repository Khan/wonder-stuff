name: Node CI

on:
  pull_request:
    # edited is needed because that's the trigger when the base branch is
    # changed on a PR
    # The rest are the defaults.
    types: [edited, opened, synchronize, reopened]

# Our jobs run like this to minimize wasting resource cycles:
#   1. Prime caches for primary configuration (ubuntu on node 14).
#      This way the next two jobs can run in parallel but rely on this primed
#      cache.
#   2. Lint and coverage
#     a. Lint
#     b. Coverage
#   3. Run tests for remaining configurations
#      Since these don't share caches, we don't need to prime those caches.
jobs:
  prime_cache_primary:
    name: Prime node_modules cache for primary configuration
    env:
      CI: true
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [14.x]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - uses: actions/cache@v2
      id: node-modules-cache # use this to check for `cache-hit` (`steps.node-modules-cache.outputs.cache-hit != 'true'`)
      with:
        path: node_modules
        key: ${{ runner.os }}${{ matrix.node-version }}-node-modules-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}${{ matrix.node-version }}-node-modules-
    - name: Install dependencies
      if: steps.node-modules-cache.outputs.cache-hit != 'true'
      run: yarn install --frozen-lockfile


  lint:
    needs: [prime_cache_primary]
    name: Lint, flow, and coverage check
    env:
      CI: true
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [14.x]
    steps:
    - name: Checking out latest commit
      uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}

    - name: Cache node modules
      id: node-modules-cache # use this to check for `cache-hit` (`steps.node-modules-cache.outputs.cache-hit != 'true'`)
      uses: actions/cache@v2
      with:
        path: node_modules
        key: ${{ runner.os }}-${{ matrix.node-version }}-node-modules-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.node-version }}-node-modules-
    - name: Install dependencies
      if: steps.node-modules-cache.outputs.cache-hit != 'true'
      run: yarn install --frozen-lockfile

    - name: Get All Changed Files
      uses: jaredly/get-changed-files@v1.0.1
      id: changed
      with:
        format: space-delimited
        absolute: true

    - name: Build so that inter-package references are resolved
      run: yarn build

    # Linting / type checking
    - name: Run ESLint (all files)
      if: contains(steps.changed.outputs.added_modified, '.eslintrc.js') || contains(steps.changed.outputs.added_modified, 'yarn.lock')
      run: |
        yarn lint:ci packages
    - name: Run ESLint (added/changed files)
      if: contains(steps.changed.outputs.added_modified, '.eslintrc.js') == false && contains(steps.changed.outputs.added_modified, 'yarn.lock') == false
      run: |
        yarn lint:ci ${{ steps.changed.outputs.added_modified }}

    - name: Run Flow
      uses: Khan/flow-action@v1.1.3
      with:
        flow-bin: ./node_modules/.bin/flow
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Collect and record coverage
    - name: Run Jest with coverage
      run: yarn coverage
    - name: Upload Coverage
      # We don't bother collecting a record of coverage for dependabot changes
      if: ${{ github.actor != 'dependabot[bot]' }}
      uses: codecov/codecov-action@v2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/coverage-final.json
        fail_ci_if_error: true

    # Make sure our packages aren't growing unexpectedly
    # This must come last as it builds the old code last and so leaves the
    # wrong code in place for the next job.
    - name: Check Builds
      uses: preactjs/compressed-size-action@v2
      with:
        # We only care about the browser ES module size, really:
        pattern: "**/dist/es/index.browser.js"
        # Always ignore SourceMaps and node_modules:
        exclude: "{**/*.map,**/node_modules/**}"
        # Clean up before a build
        clean-script: "clean"
        # Build production
        build-script: "build:prodsizecheck"

  test:
    needs: [lint]
    name: Test
    env:
      CI: true
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]
        node-version: [12.x, 14.x]
        exclude:
          # The coverage job covers this configuration
          - os: ubuntu-latest
            node-version: 14.x
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - uses: actions/cache@v2
      id: node-modules-cache # use this to check for `cache-hit` (`steps.node-modules-cache.outputs.cache-hit != 'true'`)
      with:
        path: node_modules
        key: ${{ runner.os }}${{ matrix.node-version }}-node-modules-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}${{ matrix.node-version }}-node-modules-
    - name: Install dependencies
      if: steps.node-modules-cache.outputs.cache-hit != 'true'
      run: yarn install --frozen-lockfile

    - name: Get All Changed Files
      uses: jaredly/get-changed-files@v1.0.1
      id: changed
      with:
        format: space-delimited
        absolute: true

    - name: Build so that inter-package references are resolved
      run: yarn build

    # Run tests for our target matrix
    - name: Run Jest (all files)
      if: |
        contains(steps.changed.outputs.added_modified, 'jest.config.js') ||
        contains(steps.changed.outputs.added_modified, 'yarn.lock') ||
        contains(steps.changed.outputs.added_modified, 'test.config.js') ||
        contains(steps.changed.outputs.added_modified, 'test.transform.js')
      run: yarn test
    - name: Run Jest (added/changed files)
      if: |
        (contains(steps.changed.outputs.added_modified, 'jest.config.js') ||
         contains(steps.changed.outputs.added_modified, 'yarn.lock') ||
         contains(steps.changed.outputs.added_modified, 'test.config.js') ||
         contains(steps.changed.outputs.added_modified, 'test.transform.js')) == false
      run: yarn test --passWithNoTests ${{ steps.changed.outputs.added_modified }}
