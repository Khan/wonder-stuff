name: Node CI

on:
  pull_request:
    # edited is needed because that's the trigger when the base branch is
    # changed on a PR
    # The rest are the defaults.
    types: [edited, opened, synchronize, reopened]

# Our jobs run like this to minimize wasting resource cycles:
#   1. Prime caches for primary configuration (ubuntu on node 14).
#      This way the next two jobs can run in parallel but rely on this primed
#      cache.
#   2. Lint and coverage
#     a. Lint
#     b. Coverage
#   3. Run tests for remaining configurations
#      Since these don't share caches, we don't need to prime those caches.
jobs:
  prime_cache_primary:
    name: Prime node_modules cache for primary configuration
    env:
      CI: true
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [14.x]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - uses: actions/cache@v2
      id: node-modules-cache # use this to check for `cache-hit` (`steps.node-modules-cache.outputs.cache-hit != 'true'`)
      with:
        path: node_modules
        key: ${{ runner.os }}${{ matrix.node-version }}-node-modules-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}${{ matrix.node-version }}-node-modules-
    - name: Install dependencies
      if: steps.node-modules-cache.outputs.cache-hit != 'true'
      run: yarn install --frozen-lockfile


  lint:
    needs: [prime_cache_primary]
    name: Lint and flow check
    env:
      CI: true
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [14.x]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - uses: actions/cache@v2
      name: Cache node_modules
      id: node-modules-cache # use this to check for `cache-hit` (`steps.node-modules-cache.outputs.cache-hit != 'true'`)
      with:
        path: node_modules
        key: ${{ runner.os }}${{ matrix.node-version }}-node-modules-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}${{ matrix.node-version }}-node-modules-
    - name: Install dependencies
      if: steps.node-modules-cache.outputs.cache-hit != 'true'
      run: yarn install --frozen-lockfile
    - name: Check Builds
      uses: preactjs/compressed-size-action@v2
      with:
        # Any JS files anywhere within a dist directory:
        pattern: "**/dist/**/*.js"
        # Always ignore SourceMaps and node_modules:
        exclude: "{**/*.map,**/node_modules/**}"
        # Clean up before a build
        clean-script: "clean"
    - name: Checking out base ref
      run: |
        # Make sure we also fetch the base ref so that ESLint, Flow, and Jest
        # have a ref to compare against.
        git fetch --depth 1 origin ${GITHUB_BASE_REF}
    # Linting / type checking
    - name: Run ESLint
      uses: Khan/eslint-action@v1.1.5
      with:
        eslint-lib: ./node_modules/eslint
        run-all-if-changed: package.json,.eslintrc.js
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Run Flow
      uses: Khan/flow-action@v1.1.3
      with:
        flow-bin: ./node_modules/.bin/flow
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  test:
    needs: [lint, coverage]
    name: Test
    env:
      CI: true
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]
        node-version: [12.x, 14.x]
        exclude:
          # The coverage job covers this configuration
          - os: ubuntu-latest
            node-version: 14.x
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - uses: actions/cache@v2
      id: node-modules-cache # use this to check for `cache-hit` (`steps.node-modules-cache.outputs.cache-hit != 'true'`)
      with:
        path: node_modules
        key: ${{ runner.os }}${{ matrix.node-version }}-node-modules-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}${{ matrix.node-version }}-node-modules-
    - name: Install dependencies
      if: steps.node-modules-cache.outputs.cache-hit != 'true'
      run: yarn install --frozen-lockfile
    - name: Checking out base ref
      run: |
        # Make sure we also fetch the base ref so that ESLint, Flow, and Jest
        # have a ref to compare against.
        git fetch --depth 1 origin ${GITHUB_BASE_REF}
    - name: Run jest tests
      uses: Khan/jest-action@v1.2.0
      with:
        run-all-if-changed: package.json,jest.config.js,babel.config.js
        jest-bin: ./node_modules/.bin/jest
        find-related-tests: 1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  coverage:
    needs: [prime_cache_primary]
    name: Gather coverage
    env:
      CI: true
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [14.x]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - uses: actions/cache@v2
      id: node-modules-cache # use this to check for `cache-hit` (`steps.node-modules-cache.outputs.cache-hit != 'true'`)
      with:
        path: node_modules
        key: ${{ runner.os }}${{ matrix.node-version }}-node-modules-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}${{ matrix.node-version }}-node-modules-
    - name: Install dependencies
      if: steps.node-modules-cache.outputs.cache-hit != 'true'
      run: yarn install --frozen-lockfile
    - name: Run Jest with coverage
      uses: Khan/jest-coverage-action@v1.1.3
      with:
        jest-bin: ./node_modules/.bin/jest
        coverage-data-path: ./coverage/coverage-final.json
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Upload Coverage
      uses: codecov/codecov-action@v2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/coverage-final.json
        fail_ci_if_error: true
